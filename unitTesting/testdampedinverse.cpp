#include <iostream>
#include <fstream>

#include <MatrixAbstractLayer/MatrixAbstractLayer.h>
#include <MatrixAbstractLayer/boostVector.h>
#include <MatrixAbstractLayer/boostMatrix.h>

int main (int argc, char** argv)
{

  maal::boost::Matrix Jt,U,Vt,Jp;
  maal::boost::Vector S;
#if 0
  #define NBCOLS 30
  #define NBROWS 3
  double dJt[NBROWS][NBCOLS]={
    { 0.00645703, 3.32535e-19, -0.0411488, -0.0170703, 
      -0.0019119, -3.08188e-21, -0.0649074, -4.42244e-17, 
      -0.200751, -0.446311, -0.705216, 4.19569e-17, 
      -0.00154964, 0.0230427, -2.95901e-05, 0.0018998, 
      -0.024098, -0.00124622, 0.000169495, -0.00943761, 
      3.87661e-05, -0.0017839, -2.49748e-05, -0.0240835, 
      0.00124492, -0.000167245, -0.00942246, -3.61685e-05, -0.0017839, -2.49748e-05 },
    { 0.00557834, 0.0411902, 0, 0, 0, 0.0018841, -0.00811358, 
      0.200793, -1.46833e-15, -1.4706e-15, -1.49835e-15, 0.705188, 
      -0.00803413, 0, 0.000221111, 0, 0, 0.023754, 0.00470899, -0.000856842,
      4.22276e-05, -0.000173345, 5.28316e-06, 0, 0.0237255, 0.00475828, 
      0.000865534, 9.91453e-05, 0.000173345, -5.28316e-06 },
    { 3.27459e-19, -0.00655713, -0.00581651, 0.00606791, -7.59409e-05, 
      -0.00013513, 1.26678e-15, 0.0650075, 0.0078754, -0.111752, 0.00412562, 
      0.0935855, -7.85877e-20, 0.00781562, -1.50062e-21, -0.000226879, 0.00185162, 
      -0.00465094, -0.000905028, -0.00250201, 4.0023e-06, -0.000539774, 9.39073e-05, 
      0.0017959, 0.0046461, 0.000913423, -0.00255711, 5.69186e-06, -0.000539774, 9.39073e-05}};
#else
  #define NBCOLS 30
  #define NBROWS 6

  double dJt[NBROWS][NBCOLS] = {
  { 5.13567e-18, -4.63523e-18, -3.70736e-19, 1.54663e-19, 2.32084e-18, -1.91588e-19, 4.95408e-19, -1.1165e-19, -2.08105e-18, 1.66098e-20, 2.06885e-18, 2.70309e-19, -6.15581e-19, 1.63681e-17, -7.59042e-21, 4.61368e-20, 1.93005e-17, 1.65951e-17, 2.56492e-19, -1.40201e-17, 1.52059e-17, -6.13811e-17, -2.1547e-21, -8.26852e-18, -5.871e-20, 3.07314e-18, -8.2501e-18, 6.11717e-19, -3.33509e-18, -2.00291e-21},
  {-0.00429137, 0.00286013, 0.000750127, 0.000878729, -0.00162886, -0.00286013, -0.00429137, 0.00286013, 0.000634576, -0.000771032, 0.000136456, -0.00286013, -0.0105132, -0.00577482, -0.000265638, 0.000127111, -0.000871538, 0.100547, 0.0141167, -0.0254816, 0.101167, 0.0320011, 1.105e-05, 0.00126854, -0.0071511, -0.0101243, -0.000983069, -0.00850664, 0.00270677, -2.11555e-05},
  {0.158226, -0.0133708, -0.0140282, -0.00492628, 0.0189544, 0.0133708, 0.158226, -0.0133708, 0.0158557, 0.00506842, -0.0209241, 0.0133708, -0.324489, 0.00904637, 7.07468e-06, 0.00222297, 0.121416, -0.0135068, -0.0307988, -0.10575, -0.00760894, -0.0186755, -8.76625e-05, -0.0128008, -0.00175123, -0.000323736, 0.00609561, 0.00246087, -0.00442826, -8.58882e-05},
  {-0.482276, 0.0558448, 0.0474186, 0.0197063, -0.067125, -0.0558448, -0.482276, 0.0558448, -0.039469, -0.019088, 0.058557, -0.0558448, 0.993873, 0.0111033, -0.000115466, 7.34776e-05, 0.0143619, -0.148333, 0.941771, -0.273192, 0.00646869, -0.0674326, 4.08791e-06, -0.00798883, 0.00672285, -0.000194318, -0.0123144, -0.00593526, 0.0154459, -9.90346e-06},
  {-1.75423e-16, -2.58811e-17, 4.34041e-18, 1.71683e-18, -2.06532e-17, 1.83383e-19, 2.47503e-18, 1.14667e-18, 9.08909e-18, 8.96267e-20, -2.04465e-17, -8.37504e-19, 1.00797e-19, -1.44409e-16, -2.30568e-20, 2.31577e-19, -3.14974e-16, 6.19757e-17, -1.06639e-16, -3.40067e-16, -4.47233e-17, -2.93771e-16, 7.95644e-21, 8.87962e-17, 6.27143e-18, -2.59162e-17, 8.62635e-17, 3.97026e-18, 1.12555e-16, -6.3879e-21},

  {7.15306e-17, -1.52824e-17, 2.7823e-17, 1.1391e-18, -2.94102e-18, -8.37265e-18, 1.71708e-18, 7.38078e-18, 1.98795e-18, -1.23666e-18, 1.99888e-20, -5.44107e-18, -9.85853e-19, -1.36164e-17, -1.90962e-20, 2.138e-20, -4.75344e-17, 1.84396e-16, -1.06437e-17, -2.83886e-17, -2.9915e-16, 3.89702e-17, -6.35243e-22, 6.0208e-18, -2.57109e-18, 1.02046e-18, 7.55279e-18, 1.05557e-19, 1.39522e-18, -3.60293e-21}
  };
#endif 
 

  Jt.resize(NBROWS,NBCOLS);
  for(unsigned int i=0;i<NBROWS;i++)
    {
      for(unsigned int j=0;j<NBCOLS;j++)
	{
	  Jt(i,j) =dJt[i][j];
	}
    }
  
  const unsigned int nJ = Jt.nbRows();
  const unsigned int mJ = Jt.nbCols();
  Vt.resize(mJ,mJ);
  U.resize(nJ,mJ);
  S.resize(nJ,nJ);

  Jp.resize(mJ,nJ);
  Jt.dampedInverse(Jp,1e-4,0,&S,&Vt );

  std::ofstream aof;
  aof.open("V.txt",ofstream::out);
  
  maal::boost::Matrix M=Jt*Jp;
	
  bool result=true;
  for(unsigned int i=0;i<NBROWS;i++)
      for(unsigned int j=0;j<NBROWS;j++)
	{
	  if (i==j)
	    {
	      if (M(i,j)!=1.0)
		result=false;
	    }
	  else
	    if (M(i,j)>1e-15)
	      result=false;
	}
  if (false)
    return -1;

  double *vt = traits::matrix_storage(Vt.matrix); 
  for(unsigned int i=0;i<mJ;i++)
    {
      for(unsigned int j=0;j<mJ;j++)
	aof << "(" << Vt(i,j)<< "," << *vt++ << ") " ;
      aof << std::endl;
    }
  aof.close();


  aof.open("Jp.txt",ofstream::out);
  for(unsigned int i=0;i<mJ;i++)
    {
      for(unsigned int j=0;j<nJ;j++)
	aof << Jp(i,j)<< " " ;
      aof << std::endl;
    }
  aof.close();
  
  return 0;
}
